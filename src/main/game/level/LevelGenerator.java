package main.game.level;

import main.utils.data.Config;
import main.utils.noise.PseudoRandom;
import main.utils.vectors.IVec2;

import java.io.*;

public class LevelGenerator {
    public static char[][] genTerrain(IVec2 size){
        char[][] output=new char[size.y][size.x];
        for(int x = 0; x < size.x; x++){
            for(int y = 0; y < size.y; y++){
                // Terrain
                if(PseudoRandom.isRandomBetween(-0.05,0.05,-x+50,30+y, Config.noiseSizeTerrainPath)){
                    output[y][x]='P';
                    continue;
                }
                if(PseudoRandom.isRandomBetween(0,0.1,x+5,3-y, Config.noiseSizeTerrainStones)){
                    output[y][x]='R';
                    continue;
                }
                if(PseudoRandom.isRandomBetween(0.45,0.55,2-x,3-y, Config.noiseSizeTerrainTrees)){
                    output[y][x]='T';
                    continue;
                }
                // Enemies
                double spawnKey=Math.abs(PseudoRandom.getRandomDouble(30*x,3-20*y, Config.noiseSizeTerrainTraps));
                if(spawnKey<0.0001){
                    output[y][x]='2';
                    continue;
                }
                if(spawnKey<0.0002){
                    output[y][x]='1';
                    continue;
                }
                if(spawnKey<0.0005){
                    output[y][x]='0';
                    continue;
                }
                output[y][x]='.';
            }
        }
        addSpawnTiles(output);
        return output;
    }

    private static void addSpawnTiles(char[][] map){
        int sizeX, sizeY, middleX,middleY,minX,maxX,minY,maxY;
        sizeX = map[0].length;
        sizeY = map.length;
        middleX = sizeX/2;
        middleY = sizeY/2;
        minX = Math.clamp(middleX - Config.spawnHalfWidth ,0,sizeX);
        maxX = Math.clamp(middleX + Config.spawnHalfWidth ,0,sizeX);
        minY = Math.clamp(middleY - Config.spawnHalfHeight,0,sizeY);
        maxY = Math.clamp(middleY + Config.spawnHalfHeight,0,sizeY);

        char[][] spawnMap = new char[maxY-minY][maxX-minX];
        try{
            BufferedReader bufferedReader = new BufferedReader(new FileReader("assets/data/defaultSpawn.txt"));
            for (int i = 0; i < 2*Config.spawnHalfHeight; i++) spawnMap[i]=bufferedReader.readLine().toCharArray();
        } catch (Exception e){e.printStackTrace();}

        int i=0,j=0;
        for(int x = minX; x < maxX; x++) {
            for (int y = minY; y < maxY; y++) {
                if(spawnMap[j][i]!='X') map[y][x]=spawnMap[j][i];
                j++;
            }
            j=0;
            i++;
        }
    }

    private static void writeMap(char[][] map){
        try {
            PrintWriter printWriter= new PrintWriter(new FileWriter("assets/data/autoGeneratedLevel.txt"));
            for (char[] chars : map) {
                for (int x = 0; x < map[0].length; x++) {
                    printWriter.write(chars[x]);
                }
                printWriter.write('\n');
            }
            printWriter.close();
        } catch (IOException e) {
            System.out.println(e.getStackTrace());
        }
    }
}
